/*
 * Library constructor and destructor
 *
 * Copyright (c) 2016, Wind River Systems, Inc.
 * All rights reserved.
 *
 * See "LICENSE" for license terms.
 *
 * Author:
 *	  Lans Zhang <jia.zhang@windriver.com>
 */

#include <cryptfs_tpm2.h>

/*
 * Note: this value must be same with script/ecrypt_secret.py
 */
#define XOR_CODE		@@CRYPTFS_TPM2_SECRET_XOR_BYTE_CODE@@

extern const uint8_t secret_area[];
extern const unsigned int secret_area_size[];

static void
decrypt_secret(char *out, const uint8_t *in, unsigned int in_size)
{
	uint8_t xor = XOR_CODE;

	for (unsigned int i = 0; i < in_size; ++i) {
		out[i] = in[i] ^ xor;
		xor = in[i];
	}
}

void
get_primary_key_secret(char *out, unsigned int *out_size)
{
	if (secret_area_size[0] < *out_size)
		*out_size = secret_area_size[0];

	const uint8_t *in = secret_area;

#ifdef DEBUG
	cryptfs_tpm2_util_hex_dump("encrypted primary key secret",
				   in, *out_size);
#endif

	decrypt_secret(out, in, *out_size);

#ifdef DEBUG
	cryptfs_tpm2_util_hex_dump("decrypted primary key secret",
				   (uint8_t *)out, *out_size);
#endif
}

void
get_passphrase_secret(char *out, unsigned int *out_size)
{
	if (secret_area_size[1] < *out_size)
		*out_size = secret_area_size[1];

	const uint8_t *in = secret_area + secret_area_size[0];

#ifdef DEBUG
	cryptfs_tpm2_util_hex_dump("encrypted passphrase secret",
				   in, *out_size);
#endif

	decrypt_secret(out, in, *out_size);

#ifdef DEBUG
	cryptfs_tpm2_util_hex_dump("decrypted passphrase secret",
				   (uint8_t *)out, *out_size);
#endif
}
