/*
 * BSD 2-clause "Simplified" License
 *
 * Copyright (c) 2016-2017, Lans Zhang <jia.zhang@windriver.com>, Wind River Systems, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Author:
 * 	Lans Zhang <jia.zhang@windriver.com>
 */

#include <cryptfs_tpm2.h>

/*
 * Note: this value must be same with script/ecrypt_secret.py
 */
#define XOR_CODE		@@CRYPTFS_TPM2_SECRET_XOR_BYTE_CODE@@

extern const uint8_t secret_area[];
extern const unsigned int secret_area_size[];

static void
decrypt_secret(char *out, const uint8_t *in, unsigned int in_size)
{
	uint8_t xor = XOR_CODE;

	for (unsigned int i = 0; i < in_size; ++i) {
		out[i] = in[i] ^ xor;
		xor = in[i];
	}
}

void
get_primary_key_secret(char *out, unsigned int *out_size)
{
	if (secret_area_size[0] < *out_size)
		*out_size = secret_area_size[0];

	const uint8_t *in = secret_area;

#ifdef DEBUG
	cryptfs_tpm2_util_hex_dump("encrypted primary key secret",
				   in, *out_size);
#endif

	decrypt_secret(out, in, *out_size);

#ifdef DEBUG
	cryptfs_tpm2_util_hex_dump("decrypted primary key secret",
				   (uint8_t *)out, *out_size);
#endif
}

void
get_passphrase_secret(char *out, unsigned int *out_size)
{
	if (secret_area_size[1] < *out_size)
		*out_size = secret_area_size[1];

	const uint8_t *in = secret_area + secret_area_size[0];

#ifdef DEBUG
	cryptfs_tpm2_util_hex_dump("encrypted passphrase secret",
				   in, *out_size);
#endif

	decrypt_secret(out, in, *out_size);

#ifdef DEBUG
	cryptfs_tpm2_util_hex_dump("decrypted passphrase secret",
				   (uint8_t *)out, *out_size);
#endif
}
